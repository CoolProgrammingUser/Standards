/* dev.opera.com has a bunch of cross-browser stuff. */
/*
element.style,
stylesheet.addRule(),
stylesheet.insertRule(),
stylesheet.deleteRule(),
document.querySelector(),
window.getComputedValue().getPropertyValue(),
CSS attr(),
and class manipulation
could be used to modify CSS
(in particular pseudo-elements)
*/
* {  /* makes everything include padding and borders in its height and width */
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
:root {  /* This accesses the outer-most element (html). */
    --nav-slide-time: .8s;
}
html {
    min-width: 100%;
    min-height: 100%;
}
body {
    margin: 0%;
    min-width: 100%;
    min-height: 100%;
    padding: 0%;
    background: #0000ee;  /* for browsers that don't support gradients */
    background: -webkit-repeating-linear-gradient(#0000ee, white 100vh, #0000ee 200vh);  /* Safari 5.1 to 6.0 */
    background: -o-repeating-linear-gradient(#0000ee, white 100vh, #0000ee 200vh);  /* Opera 11.1 to 12.0 */
    background: -moz-repeating-linear-gradient(#0000ee, white 100vh, #0000ee 200vh);  /* Firefox 3.6 to 15 */
    background: repeating-linear-gradient(#0000ee, white 100vh, #0000ee 200vh);  /* standard syntax */
    text-align: center;
}
main {
    margin: auto;
    margin-top: 4%;
    width: 90%;
    min-height: 100%;
    height: 100%;
    padding: 1% 5% 5% 5%;
    background: rgba(255, 255, 255, .5);
}
div {
    margin: auto;
    display: inline-block;
}
nav {
    background: white;
}
nav.left-nav {
    position: fixed;
    left: 0em;
    top: 0em;
    border-right: .05em solid #aaaaaa;
    width: 15%;
    height: 100%;
}
body.left-nav {
    margin: 0% 0% 0% 15%;
    min-width: 85%;
    /*
    The width isn't 85% because it wouldn't leave room for a vertical scroll bar.
    (Not leaving room would create a horizontal scroll bar.)
    */
}
nav.hidden-left-nav {
    position: fixed;
    left: -20.5vw;
    top: 0vh;
    z-index: 5;
    border-right: .05em solid #aaaaaa;
    width: 20.5vw;
    height: 100vh;
    transition: transform .8s;
    transition: transform var(--nav-slide-time);
}
div.nav-tab {
    position: fixed;
    left: 0vh;
    top: 46vh;
    z-index: 5;
    width: 4vh;
    height: 8vh;
    display: flex;
    justify-content: center;
    align-items: center;
    border: .05em solid #888888;
    border-left: none;
    border-radius: 0vh 1.5vh 1.5vh 0vh;
    background: #bbbbbb;
    font-family: monospace;
    font-size: 2em;
    color: #777777;
    -webkit-touch-callout: none;  /* iOS Safari */
    -webkit-user-select: none;  /* Safari */
    -khtml-user-select: none;  /* Konqueror HTML */
    -moz-user-select: none;  /* Firefox */
    -ms-user-select: none;  /* Internet Explorer and Microsoft Edge */
    user-select: none;  /* non-prefixed version of preventing text selection */
    cursor: default;
    transition: transform .8s;
    transition: transform var(--nav-slide-time);
}
div.darkener {
    position: fixed;
    left: 0em;
    top: 0em;
    z-index: 4;
    width: 100vw;
    height: 100vh;
    background: black;
    opacity: 0;
    pointer-events: none;
    transition: opacity .8s;
    transition: opacity var(--nav-slide-time);
}
nav.top-nav {
    position: -webkit-sticky;
    position: sticky;
    left: 0em;
    top: 0em;
    border-bottom: .05em solid #aaaaaa;
    width: 100%;
}
a {
    text-decoration: none;
}
a:hover {
    text-decoration: underline;
}
ol, ul {
    display: table;
    margin: .5em auto;
    padding-right: 1em;
    text-align: left;
}
ul {
    padding-left: 2em;
}
li {
    margin-top: .5em;
    margin-bottom: .5em;
}
table {
    margin: auto;
    border: .05em solid black;
    border-collapse: collapse;
    background: #fefefe;
    text-align: center;
}
th, td {
    border: .05em solid black;
    border-collapse: collapse;
    padding: .5em;
}
th {
    background: #dddddd;
}
input {
    text-align: center;
}
input[type="text"] {
    cursor: text;
}
input[type="checkbox"] {
    margin: .5em;
    cursor: pointer;
}
input[type="button"] {
    cursor: pointer;
}
button {
    margin: .5em;
    cursor: pointer;
}
textarea {
    font-family: inherit;
    font-size: 1em;
}
sup, sub {
    vertical-align: baseline;
    position: relative;
    top: -.4em;
}
sub { 
    top: .4em; 
}
mark {
    padding: .1em;
}
label {
    cursor: text;
}
dialog {
    box-sizing: content-box;  /* This prevents the border from crowding out the content in extreme screen circumstances. */
    position: fixed;
    left: 50%;
    top: 50%;
    z-index: 10;
    border: 2vh solid #aadddd;  /* I use vh because I know the border won't be any smaller than what I see, even on mobile devices. */
    border-radius: 4vh;
    padding: 1em;
    max-width: 30%;  /* This would max out at about 50% anyway because the positioning and translation limit the width. */
    max-height: 50%;
    background: white;
    overflow: auto;
    transform: translate(-50%, -50%) scale(.001, .001);  /* "translate" has to be before "scale" for this to work properly */
    transition: .5s;
}
dialog .buttons {
    display: block;
    margin-top: .5em;
}
.dialog {  /* "dialog" formatting is replicated because <dialog> isn't widely supported yet */
    box-sizing: content-box;  /* This prevents the border from crowding out the content in extreme screen circumstances. */
    position: fixed;
    left: 50%;
    top: 50%;
    z-index: 10;
    border: 2vh solid #aadddd;  /* I use vh because I know the border won't be any smaller than what I see, even on mobile devices. */
    border-radius: 4vh;
    padding: 1em;
    max-width: 30%;  /* This would max out at about 50% anyway because the positioning and translation limit the width. */
    max-height: 50%;
    background: white;
    overflow: auto;
    transform: translate(-50%, -50%) scale(.001, .001);  /* "translate" has to be before "scale" for this to work properly */
    transition: .5s;    
}
.dialog .buttons {
    display: block;
    margin-top: .5em;
}
note- {  /* my custon tag (puts notes in text) */
    color: blue;
    cursor: help;
}
note-:hover {
    text-decoration: underline;
}
over- {  /* my custom tag (overlines things) */
    display: inline;
    margin: 0em;
    border: 0em;
    padding: 0em;
    text-decoration: overline;
}
.login-section {
    position: absolute;
    top: 3em;
    right: 3em;
}
.list {  /* for left-aligned content as close to the middle of the page as possible */
    display: table;
    margin: auto;
    text-align: left;
}
.trigger {
    position: relative;
}
.trigger:hover .popup {
    opacity: 1;
    pointer-events: auto;
}
.popup {
    font-size: .75em;  /* This changes the "em" value for everything else (including "::before" and "::after"). */
    position: absolute;
    left: -1em;
    bottom: 2em;
    border-radius: .5em;
    padding: .25em;
    min-width: 15em;
    background: white;
    box-shadow: 0.25em 0.25em 0.75em #222;
    overflow: auto;
    opacity: 0;
    pointer-events: none;
    transition: opacity .5s linear .5s;
}
.popup::before {  /* This makes sure you don't have the leave the trigger before hovering over the pop-up. */
    content: "";
    position: absolute;
    left: 0em;
    bottom: -.8em;
    width: 15em;
    height: .8em;
}
.popup::after {  /* makes the protruding triangle of the pop-up */
    content: "";
    position: absolute;
    left: 1em;
    bottom: -1em;
    border-width: .5em;
    border-style: solid;
    border-color: white transparent transparent transparent;
}
.circle {
    border: .05em solid black;
    border-radius: .5em;
}
.full-spin {
    transition: 1s;
    -ms-transform: rotate(360deg);  /* Internet Explorer 9 */
    -webkit-transform: rotate(360deg);  /* Safari */
    transform: rotate(360deg);  /* standard syntax */
}
.half-spin {
    transition: .5s;
    -ms-transform: rotate(180deg);  /* Internet Explorer 9 */
    -webkit-transform: rotate(180deg);  /* Safari */
    transform: rotate(180deg);  /* standard syntax */
}
h1.main-title {
    color: white;
}
table.compact {
    visibility: hidden;
}
/*
@keyframes animation-name {
    from {
        starting position(s)
    }
    to {
        ending position(s)
    }
    An indefinite number of percentages (with "%") can be used instead of "from" and "to".
}
.class {
    animation-name: animation-name;
    animation-duration: 0s;
    animation-timing-function: ease;
    animation-delay: 0s;
    animation-iteration-count: 1;
    animation-direction: normal;
    animation-fill-mode: none;  // I like "forwards" better.
}
*/
@font-face {
    font-family: "Bad Duck";
    src: url(https://coolprogramminguser.github.io/Standards/fonts/Bad Duck.ttf) format("truetype");
}
@font-face {
    font-family: "Braille";
    src: url(https://coolprogramminguser.github.io/Standards/fonts/Braille.ttf) format("truetype");
}
