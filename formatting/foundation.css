/* dev.opera.com has a bunch of cross-browser stuff. */
/*
element.style,
stylesheet.addRule(),
stylesheet.insertRule(),
stylesheet.deleteRule(),
document.querySelector(),
window.getComputedValue().getPropertyValue(),
CSS attr(),
and class manipulation
could be used to modify CSS
(in particular pseudo-elements)
*/

* {  /* makes everything include padding and borders in its height and width */
	-moz-box-sizing: border-box;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
}

:root {  /* This accesses the outer-most element (html). */
	--nav-slide-time: .8s;
}

html {
	min-width: 100%;
	min-height: 100%;
}

body {
	margin: 0%;
	min-width: 100%;
	min-height: 100%;
	padding: 0% 0% 4% 0%;
	background: #0000ee;  /* for browsers that don't support gradients */
	background: -webkit-repeating-linear-gradient(#0000ee, white 100vh, #0000ee 200vh);  /* Safari 5.1 to 6.0 */
	background: -o-repeating-linear-gradient(#0000ee, white 100vh, #0000ee 200vh);  /* Opera 11.1 to 12.0 */
	background: -moz-repeating-linear-gradient(#0000ee, white 100vh, #0000ee 200vh);  /* Firefox 3.6 to 15 */
	background: repeating-linear-gradient(#0000ee, white 100vh, #0000ee 200vh);  /* standard syntax */
	text-align: center;
}

main {
	/**
	meant to hold the main content of the page
	*/
	margin: 4% auto 0%;
	width: 90%;
	min-height: 100%;
	height: 100%;
	padding: 1% 5% 5% 5%;
	background: rgba(255, 255, 255, .5);
}

div {
	margin: auto;
	display: inline-block;
}

nav {
	background: white;
	padding: 1em;
}

iframe {
	border: none;
}

body.navigation {
	margin: 0em;
	padding: 1em;
	background: white;
}

nav div {
	overflow: auto;
}

body.navigation h2, nav h2 {
	margin-top: 0em;
}

body.navigation ul, body.navigation ol, nav ul, nav ol {
	padding-left: 1em;
	padding-right: 0em;
}

iframe.left-nav, nav.left-nav {
	/**
	creates a fixed navigation section on the left side of the screen
	*/
	position: fixed;
	left: 0em;
	top: 0em;
	-moz-box-sizing: content-box;
	-webkit-box-sizing: content-box;
	box-sizing: content-box;
	border-right: .05em solid #aaaaaa;
	width: 15%;
	height: 100%;
}

body.left-nav {
	/**
	makes the body move over to make room for the navigation section on the left side of the screen
	*/
	margin: 0% 0% 0% 15%;
	min-width: 85%;
}

aside {
	position: fixed;
	left: 100%;
	top: 0%;
	border-left: .05em solid #aaaaaa;
	width: 15%;
	height: 100%;
	transition: .8s;
	transition: var(--nav-slide-time);
}

.right-section {
	/**
	creates a fixed section on the right side of the screen
	*/
	position: fixed;
	right: 0em;
	top: 0em;
	border-left: .05em solid #aaaaaa;
	width: 15%;
	height: 100%;
}

body.right-section {
	/**
	makes the body move over to make room for a section on the right side of the screen
	*/
	position: static;
	margin: 0% 15% 0% 0%;
	border: none;
	min-width: 85%;
	height: auto;
}

body.left-nav.right-section {
	/**
	makes the body make room for a section on the left and right side of the screen
	*/
	margin: 0% 15% 0% 15%;
	min-width: 70%;
}

nav.hidden-left-nav {
	/**
	creates a fixed navigation section hidden behind the left side of the screen
	*/
	position: fixed;
	left: -45.5vh;  /* I use vh because I want to know that things won't be any smaller than what I see, even on mobile devices. */
	top: 0vh;
	z-index: 5;
	border-right: .05em solid #aaaaaa;
	width: 45.5vh;
	height: 100vh;
	transition: .8s;
	transition: var(--nav-slide-time);
}

nav.hidden-left-nav:hover {
	/**
	unhides the navigation section
	*/
	-ms-transform: translateX(45vh);  /* Internet Explorer 9 */
	-webkit-transform: translateX(45vh);  /* Safari */
	transform: translateX(45vh);  /* standard syntax */
	/* These aren't 45.5vh because, otherwise, the far left end of the screen would stop the hovering. */
}

nav.hidden-left-nav::before {
	/**
	creates darkness to cover the rest of the screen
	*/
	content: "";
	position: absolute;
	left: calc(100% + .05em);
	left: calc(100% + attr(border-right-width length));
	top: 0%;
	width: 100vw;
	height: 100%;
	background: black;
	opacity: 0;
	pointer-events: none;
	transition: .8s;  /* I don't understand why this (or the next line) is necessary. */
	transition: var(--nav-slide-time);
}

nav.hidden-left-nav:hover::before {
	/**
	causes the darkness to fade in
	*/
	opacity: .8;
}

nav.hidden-left-nav::after {
	/**
	creates a tab sticking out of the side to access the hidden left navigation
	*/
	content: ">";
	position: absolute;
	left: calc(100% + .025em);
	left: calc(100% + attr(border-right-width length) / 2);
	top: 46%;
	top: calc(50% - attr(height %, 8%) / 2);  /* This will only work when attr() supports non-string values (and fallbacks) */
	width: 8%;
	height: 8%;
	display: -moz-flex;
	display: -webkit-flex;
	display: flex;
	justify-content: center;
	align-items: center;
	border: .05em solid #888888;
	border-left: none;
	border-radius: 0vh 1.5vh 1.5vh 0vh;
	background: #bbbbbb;
	font-family: monospace;
	font-size: 2em;
	color: #777777;
	-webkit-touch-callout: none;  /* iOS Safari */
	-webkit-user-select: none;  /* Safari */
	-khtml-user-select: none;  /* Konqueror HTML */
	-moz-user-select: none;  /* Firefox */
	-ms-user-select: none;  /* Internet Explorer and Microsoft Edge */
	user-select: none;  /* non-prefixed version of preventing text selection */
	cursor: default;
}

nav.hidden-left-nav:hover::after {
	/**
	changes the arrow direction
	*/
	content: "<";
}

nav.hidden-left-nav > iframe {
	width: 100%;
	height: 100%;
}

iframe.top-nav, nav.top-nav {
	/**
	creates a navigation section that moves to the top and stays there
	*/
	position: -webkit-sticky;
	position: sticky;
	top: 0em;  /* sticky positioning doesn't work without a position specification */
	z-index: 1;
	padding: 0em;
	width: 100%;
	background: darkblue;
}

nav.top-nav div.drop-down {
	display: inline-table;
	position: relative;
	overflow: visible;
}

nav.top-nav div.drop-down > div:first-child, nav.top-nav > button {
	/**
	makes the part of the drop-down that you see
	or the buttons of a top navigation
	*/
	display: block;
	position: static;
	z-index: 1;
	padding: .5em;
	background: darkblue;
	font-size: 1.5em;
	color: steelblue;
	cursor: pointer;
}

nav.top-nav > button {
	display: inline-block;
	margin: 0em;
	border: none;
}

nav.top-nav div.drop-down div {
	/**
	makes the part of the drop-down that appears
	*/
	display: none;
	position: absolute;
	z-index: 2;
	background: steelblue;
	white-space: nowrap;
	cursor: default;
}

nav.top-nav label {
	/**
	makes sure labels don't wrap strangely
	*/
	white-space: nowrap;
}

nav.top-nav div.drop-down:focus > div, nav.top-nav div.drop-down > div:hover, nav.top-nav div.drop-down:focus-within > div {
	/**
	unhides the drop-down menu when focus is received
	<div>s need a tabindex to receive focus
	*/
	display: block;
}

nav.top-nav div.drop-down:hover > div:first-child, nav.top-nav div.drop-down:focus > div:first-child, nav.top-nav div.drop-down:focus-within > div:first-child {
	/**
	lightens the initially visible part of the drop-down
	when hovered or the drop-down part is visible
	*/
	background: lightsteelblue;
}

a {
	text-decoration: none;
}

a:hover {
	text-decoration: underline;
}

ol, ul {
	display: table;
	margin: .5em auto;
	padding-right: 1em;
	text-align: left;
}

ul {
	padding-left: 2em;
}

li {
	margin-top: .5em;
	margin-bottom: .5em;
}

table {
	margin: auto;
	border: none;
	border-collapse: collapse;
	background: none;
	text-align: center;
}

th, td {
	border: .05em solid black;
	border-collapse: collapse;
	padding: .5em;
}

th {
	background: #dddddd;
}

td {
	background: white;
}

table.organizational th, table.organizational td {
	border: none;
	background: none;
}

table.conversation th {
	/**
	styles the name of the speaker
	*/
	border: none;
	background: none;
	text-align: right;
}

table.conversation td {
	/**
	styles what the speaker said
	*/
	border: none;
	background: none;
	text-align: left;
}

table.conversation td:first-child {
	/**
	allows unspoken events to be centered
	*/
	text-align: center;
}

input {
	text-align: center;
}

input[type="text"] {
	cursor: text;
}

input[type="text"][disabled], input[type="text"]:disabled {
	cursor: default;
}

input[type="checkbox"] {
	margin: .5em;
	cursor: pointer;
}

input[type="checkbox"][disabled], input[type="checkbox"]:disabled {
	cursor: default;
}

input[type="button"] {
	margin: .5em;
	cursor: pointer;
}

input[type="button"][disabled], input[type="button"]:disabled {
	cursor: default;
}

button {
	margin: .5em;
	cursor: pointer;
}

button[disabled], button:disabled {
	cursor: default;
}

select {
	cursor: pointer;
}

select[disabled], select:disabled {
	cursor: default;
}

option {
	cursor: pointer;
}

option[disabled], option:disabled {
	cursor: default;
}

aside {
	background-color: white;
	padding: 1em;
	overflow: auto;
}

aside h2 {
	margin-top: 0em;
}

textarea {
	font-family: inherit;
	font-size: 1em;
}

sup, sub {
	position: relative;
	top: -.4em;
	vertical-align: baseline;
}

sub { 
	top: .4em; 
}

mark {
	padding: .1em;
}

label {
	cursor: text;
}

section {
	/**
	This is basically a replacement for paragraph tags.
	(<p> tags don't allow <div> tags inside them)
	*/
	display: block;
	margin: 1em 0em;
}

dialog {
	box-sizing: content-box;  /* This prevents the border from crowding out the content in extreme screen circumstances. */
	position: fixed;
	left: 50%;
	top: 50%;
	z-index: 10;
	border: 2vh solid #aadddd;  /* I use vh because I know the border won't be any smaller than what I see, even on mobile devices. */
	border-radius: 4vh;
	padding: 1em;
	max-width: 30%;  /* This would max out at about 50% anyway because the positioning and translation limit the width. */
	max-height: 50%;
	background: white;
	overflow: auto;
	transform: translate(-50%, -50%) scale(.001, .001);  /* "translate" has to be before "scale" for this to work properly */
	transition: .5s;
}

dialog .buttons {
	display: block;
	margin-top: .5em;
}

.dialog {  /* <dialog> formatting is replicated because it isn't widely supported yet */
	box-sizing: content-box;  /* This prevents the border from crowding out the content in extreme screen circumstances. */
	z-index: 10;
	border: 12px solid #aadddd;  /* This is in pixels in order to prevent random scroll bars appearing (probably because of otherwise getting a fraction of a pixel). */
	border-radius: 4vh;
	padding: 1em;
	max-width: 30%;
	max-height: 50%;
	background: white;
	overflow: auto;
	-ms-transform: scale(.001, .001);
	-webkit-transform: scale(.001, .001);
	transform: scale(.001, .001);  /* "translate" has to be before "scale" for this to work properly */
	transition: .5s;
}

.dialog .buttons {
	display: block;
	margin-top: .5em;
}

note- {
	/**
	my custom tag
	puts notes in text
	*/
	display: inline;
	position: relative;
	color: blue;
	cursor: help;
}

note-::before {
	/**
	makes a * where there's a note
	setting the variable --before-content can change the content
	*/
	content: "*";  /* for browsers that don't support var() */
	content: var(--before-content, "*");
}

.trigger {
	position: relative;
}

note-:hover {
	text-decoration: underline;
}

note- div, .trigger div, .pop-up div {
	/**
	This needs to come before the styling for <div>s with child selectors
	*/
	max-height: 20em;
	overflow: auto;
}

note- > div, .trigger > div, .pop-up {
	font-size: .75em;  /* This changes the "em" value for everything else (including "::before" and "::after"). */
	position: absolute;
	left: -1em;
	bottom: 2em;
	border-radius: .5em;
	padding: .5em;
	min-width: 15em;
	background: white;
	color: black;
	overflow: visible;
	box-shadow: 0.25em 0.25em 0.75em #222;
	opacity: 0;
	pointer-events: none;
	transition: opacity .5s linear .5s;
}

.pop-up {
	text-align: center;
	transition: opacity .5s linear;
}

note- > div::before, .trigger > div::before, .pop-up::before {
	/**
	This makes sure you don't have the leave the trigger before hovering over the pop-up.
	*/
	content: "";
	position: absolute;
	left: 0em;
	bottom: -.8em;
	width: 15em;
	height: .8em;
}

note- > div::after, .trigger > div::after, .pop-up::after {
	/**
	makes the protruding triangle of the pop-up
	*/
	content: "";
	position: absolute;
	left: 1em;
	bottom: -1em;
	border-width: .5em;
	border-style: solid;
	border-color: white transparent transparent transparent;
}

note-:hover > div, .trigger:hover > div, .pop-up.active {
	/**
	makes the pop-up appear when the note or trigger is hovered over
	*/
	opacity: 1;
	pointer-events: auto;
}

over- {
	/**
	my custom tag
	overlines things
	*/
	display: inline;
	margin: 0em;
	border: 0em;
	padding: 0em;
	text-decoration: overline;
}

.list {
	/**
	for left-aligned content as close to the middle of the page as possible
	*/
	display: table;
	margin: auto;
	text-align: left;
}

.page-jump-list {
	/**
	styles the section of the page that navigates to other sections of the page
	*/
	display: block;
	margin: 2em auto;
	padding: 0em 1em 1em;
	background: white;
	background: rgba(255, 255, 255, .5);
}

.page-jump-list ol {
	/**
	makes ordered lists in page-jump-list sections account for the padding of that section
	ordinary list padding is 2.5
	*/
	padding-left: 1.5em;
}

.user-section {
	position: absolute;
	top: 2em;
	right: 3em;
	z-index: 2;
}

#userSettings {
	display: none;
}

#signOut {
	display: none;
}

.circle {
	/**
	circles things (like text)
	*/
	border: .05em solid black;
	border-radius: .5em;
}

.full-spin {
	/**
	spins something (like a <div>) in a full rotation
	*/
	transition: 1s;
	-ms-transform: rotate(360deg);  /* Internet Explorer 9 */
	-webkit-transform: rotate(360deg);  /* Safari */
	transform: rotate(360deg);  /* standard syntax */
}

.half-spin {
	/**
	spins something (like a div) in a half rotation
	*/
	transition: .5s;
	-ms-transform: rotate(180deg);  /* Internet Explorer 9 */
	-webkit-transform: rotate(180deg);  /* Safari */
	transform: rotate(180deg);  /* standard syntax */
}

h1.main-title {
	/**
	formats the main title of the website/page
	*/
	color: white;
}

div.darkener {
	/**
	darkens the screen
	*/
	display: -webkit-flex;
	display: -ms-flex;
	display: flex;
	position: fixed;
	left: 0vw;
	top: 0vh;
	z-index: 5;
	width: 100vw;
	height: 100vh;
	background-color: rgba(0, 0, 0, 0);
	pointer-events: none;
	transition: background-color .5s;
}

table.compact {
	visibility: hidden;
}

/*
@keyframes animation-name {
	from {
		starting position(s)
	}

	to {
		ending position(s)
	}

	An indefinite number of percentages (with "%") can be used instead of "from" and "to".
}

.class {
	animation-name: animation-name;
	animation-duration: 0s;
	animation-timing-function: ease;
	animation-delay: 0s;
	animation-iteration-count: 1;
	animation-direction: normal;
	animation-fill-mode: none;  // I like "forwards" better.
}

*/
@font-face {
	font-family: "Bad Duck";
	src: url(https://epicenterprograms.github.io/standards/fonts/Bad Duck.ttf) format("truetype");
}

@font-face {
	font-family: "Braille";
	src: url(https://epicenterprograms.github.io/standards/fonts/Braille.ttf) format("truetype");
}

